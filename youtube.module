<?php

/**
 * @file
 * Youtube field module adds a field for YouTube videos.
 */

/**
 * Implements hook_field_info().
 */
function youtube_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'youtube' => array(
      'label' => t('YouTube video'),
      'description' => t('A video hosted on YouTube.'),
      'default_widget' => 'youtube',
      'default_formatter' => 'youtube_video',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function youtube_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['input'])) {

      $valid = FALSE;
      // The video URL can be in the format http://www.youtube.com/watch?v=1SqBdS0XkV4
      if (strstr($item['input'], 'youtube.com/watch?v=')) {
        $valid = TRUE;
      }
      // The video URL can be in the format http://youtu.be/1SqBdS0XkV4
      elseif (strstr($item['input'], 'youtu.be/')) {
        $valid = TRUE;
      }

      if (!$valid) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'youtube_invalid',
          'message' => t('Please provide a valid YouTube URL.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function youtube_field_is_empty($item, $field) {
  return empty($item['input']);
}

/**
 * Implements hook_field_formatter_info().
 */
function youtube_field_formatter_info() {
  $formatters =  array(
    // This formatter displays your youtube video.
    'youtube_video' => array(
      'label' => t('YouTube video'),
      'field types' => array('youtube'),
    ),
    // This formatter just displays a thumbnail for your video.
    'youtube_thumbnail' => array(
      'label' => t('YouTube thumbnail'),
      'field types' => array('youtube'),
      'settings' => array('image_style' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function youtube_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function youtube_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // We only need a summary for the thumbnail style.
  if ($display['type'] == 'youtube_thumbnail') {
    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    if (isset($image_styles[$settings['image_style']])) {
      $summary = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary = t('Original image');
    }

    return $summary;
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function youtube_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the youtube embed code.
    case 'youtube_video':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'youtube_video',
          '#video_id' => $item,
        );
      }
      break;
    
    // This formatter uses an imagecache preset to generate a thumbnail.
    case 'youtube_thumbnail':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'youtube_thumbnail',
          '#video_id' => $item,
          '#image_style' => $display['settings']['image_style'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function youtube_field_widget_info() {
  return array(
    'youtube' => array(
      'label' => t('YouTube'),
      'field types' => array('youtube'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function youtube_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['input']) ? $items[$delta]['input'] : '';

  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    '#size' => 50,
    '#maxlength' => 1024,
    '#description' => t('Enter the YouTube URL (or Embed code). Valid URL formats include: http://www.youtube.com/watch?v=1SqBdS0XkV4, http://youtu.be/1SqBdS0XkV4'),
    '#element_validate' => array('youtube_input_validate'),
    //'#value_callback' => 'youtube_widget_value',
  );

  $video_id = isset($items[$delta]['video_id']) ? $items[$delta]['video_id'] : '';
  $video_id_element = array(
    '#markup' => t('this is your YouTube ID: ') . $video_id,
  );
  return array(
    'input' => $element,
    'video_id' => $video_id_element,
  );
}

/**
 * 
 */
function youtube_input_validate($element, &$form_state, $form) {
  
  $input = $element['#value'];
  $valid = FALSE;
  
  if (strstr($input, 'youtube.com/watch?v=')) {
    $valid = TRUE;
    $anchor = '?v=';
    $position = strpos($input, $anchor);
    $video_id = trim(substr($input, $position + strlen($anchor)));
  }
  
  // The video URL can be in the format http://youtu.be/1SqBdS0XkV4
  elseif (strstr($input, 'youtu.be/')) {
    $valid = TRUE;
    $anchor = 'be/';
    $position = strpos($input, $anchor);
    $video_id = trim(substr($input, $position + strlen($anchor)));
  }
  
  if ($valid) {
    $video_id_element = array(
      '#parents' => $element['#parents'],
    );
    array_pop($video_id_element['#parents']);
    $video_id_element['#parents'][] = 'video_id';
    form_set_value($video_id_element, $video_id, &$form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function youtube_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'youtube_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function youtube_theme($existing, $type, $theme, $path) {
  return array(
    'youtube_thumbnail' => array(
      'variables' => array('video_id' => NULL, 'image_style' => NULL),
      //'file' => 'youtube.theme.inc',
    ),
    'youtube_video' => array(
      'variables' => array('video_id' => NULL), 
      //'file' => 'youtube.theme.inc',
    ),
  );
}

/**
 * Theme function for videos.
 */
function theme_youtube_video($variables) {
  $id = $variables['video_id'];

  $output = 'video';

  return $output;
}


/**
 * Theme function for thumbnails.
 */
function theme_youtube_thumbnail($variables) {
  $id = $variables['video_id'];
  $style = $variables['image_style'];

  $output = 'thumbnail';

  return $output;
}