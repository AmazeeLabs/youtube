<?php

/**
 * @file
 * Youtube field module adds a field for YouTube videos.
 */
 
/**
 * Implements hook_menu().
 */
function youtube_menu() {
  $items['admin/config/media/youtube'] = array(
    'title' => 'YouTube settings', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('youtube_settings_form'),
    'access arguments' => array('access content'), 
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings form for YouTube defaults.
 */
function youtube_settings_form($form) {
  $form = array();
  $form['text'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('The following settings will be used as default values 
      on all YouTube video fields.  Many of these settings can be overridden
      on a per-field basis.') . '</p>',
  );
  $form['youtube_suggest'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show suggested videos when the video finishes'),
    '#default_value' => variable_get('youtube_suggest', TRUE),
  );
  $form['youtube_https'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use HTTPS'),
    '#default_value' => variable_get('youtube_https', FALSE),
  );
  $form['youtube_privacy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable privacy-enhanced mode'),
    '#default_value' => variable_get('youtube_privacy', FALSE),
  );
  $form['youtube_old'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use old embed code (Flash)'),
    '#default_value' => variable_get('youtube_old', FALSE),
    '#description' => t('Checking this box will load your video in flash, which will not work on many mobile devices. Leaving this box unchecked loads the video in an iFrame (recommended).'),
  );
  $form['youtube_size'] = array(
    '#type' => 'select',
    '#title' => t('Default video size'),
    '#options' => array(
      '420x315' => '450px by 315px',
      '480x360' => '480px by 360px',
      '640x480' => '640px by 480px',
      '960x720' => '960px by 720px',
    ),
    '#default_value' => variable_get('youtube_size', '420x315'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_info().
 */
function youtube_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'youtube' => array(
      'label' => t('YouTube video'),
      'description' => t('A video hosted on YouTube.'),
      'default_widget' => 'youtube',
      'default_formatter' => 'youtube_video',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function youtube_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['input'])) {

      $valid = FALSE;
      // The video URL can be in the format http://www.youtube.com/watch?v=1SqBdS0XkV4
      if (strstr($item['input'], 'youtube.com/watch?v=')) {
        $valid = TRUE;
      }
      // The video URL can be in the format http://youtu.be/1SqBdS0XkV4
      elseif (strstr($item['input'], 'youtu.be/')) {
        $valid = TRUE;
      }

      if (!$valid) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'youtube_invalid',
          'message' => t('Please provide a valid YouTube URL.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function youtube_field_is_empty($item, $field) {
  return empty($item['input']);
}

/**
 * Implements hook_field_formatter_info().
 */
function youtube_field_formatter_info() {
  $formatters =  array(
    // This formatter displays your youtube video.
    'youtube_video' => array(
      'label' => t('YouTube video'),
      'field types' => array('youtube'),
    ),
    // This formatter just displays a thumbnail for your video.
    'youtube_thumbnail' => array(
      'label' => t('YouTube thumbnail'),
      'field types' => array('youtube'),
      'settings' => array('image_style' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function youtube_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function youtube_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // We only need a summary for the thumbnail style.
  if ($display['type'] == 'youtube_thumbnail') {
    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    if (isset($image_styles[$settings['image_style']])) {
      $summary = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary = t('Original image');
    }

    return $summary;
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function youtube_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the youtube embed code.
    case 'youtube_video':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'youtube_video',
          '#video_id' => $item['video_id'],
        );
      }
      break;
    
    // This formatter uses an imagecache preset to generate a thumbnail.
    case 'youtube_thumbnail':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'youtube_thumbnail',
          '#video_id' => $item['video_id'],
          '#image_style' => $display['settings']['image_style'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function youtube_field_widget_info() {
  return array(
    'youtube' => array(
      'label' => t('YouTube'),
      'field types' => array('youtube'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function youtube_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['input']) ? $items[$delta]['input'] : '';

  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    '#size' => 50,
    '#maxlength' => 1024,
    '#description' => t('Enter the YouTube URL (or Embed code). Valid URL formats include: http://www.youtube.com/watch?v=1SqBdS0XkV4, http://youtu.be/1SqBdS0XkV4'),
    '#element_validate' => array('youtube_input_validate'),
    //'#value_callback' => 'youtube_widget_value',
  );

  $video_id = isset($items[$delta]['video_id']) ? $items[$delta]['video_id'] : '';
  $video_id_element = array(
    '#markup' => t('this is your YouTube ID: ') . $video_id,
  );
  return array(
    'input' => $element,
    'video_id' => $video_id_element,
  );
}

/**
 * 
 */
function youtube_input_validate($element, &$form_state, $form) {
  
  $input = $element['#value'];
  $valid = FALSE;
  
  if (strstr($input, 'youtube.com/watch?v=')) {
    $valid = TRUE;
    $anchor = '?v=';
    $position = strpos($input, $anchor);
    $video_id = trim(substr($input, $position + strlen($anchor)));
  }
  
  // The video URL can be in the format http://youtu.be/1SqBdS0XkV4
  elseif (strstr($input, 'youtu.be/')) {
    $valid = TRUE;
    $anchor = 'be/';
    $position = strpos($input, $anchor);
    $video_id = trim(substr($input, $position + strlen($anchor)));
  }
  
  if ($valid) {
    $video_id_element = array(
      '#parents' => $element['#parents'],
    );
    array_pop($video_id_element['#parents']);
    $video_id_element['#parents'][] = 'video_id';
    form_set_value($video_id_element, $video_id, &$form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function youtube_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'youtube_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function youtube_theme($existing, $type, $theme, $path) {
  return array(
    'youtube_thumbnail' => array(
      'variables' => array('video_id' => NULL, 'image_style' => NULL),
      //'file' => 'youtube.theme.inc',
    ),
    'youtube_video' => array(
      'variables' => array('video_id' => NULL), 
      //'file' => 'youtube.theme.inc',
    ),
  );
}

/**
 * Theme function for videos.
 */
function theme_youtube_video($variables) {
  $id = $variables['video_id'];
  
  // Get YouTybe settings.
  $old = variable_get('youtube_old', FALSE);
  $https = variable_get('youtube_https', FALSE);
  $suggest = variable_get('youtube_suggest', TRUE);
  $privacy = variable_get('youtube_privacy', FALSE);
  $size = variable_get('youtube_size', '420x315');
  $dimensions = youtube_get_dimensions($size);

  // Protocol changes based on settings.
  $protocol = ($https) ? 'https' : 'http';
  
  // Query string changes based on setings.
  $query = array();
  if ($old){
    $query['version'] = '3';
    $query['hl'] = 'en_US';
  }
  if (!$suggest) {
    $query['rel'] = '0';
  }
  
  // Domain changes based on settings.
  $domain = ($privacy) ? 'youtube-nocookie.com' : 'youtube.com';

  $path = $protocol . '://www.' . $domain . '/embed/' . $id;
  $src = url($path, array('query' => $query));
  
  if ($old) {
    $path = $protocol . '://www.' . $domain . '/v/' . $id;
    $embed_src = url($embed_path, array('query' => $query));
  }

  if ($old) {
    $output = '<object width="' . $dimensions['width'] . '" 
      height="' . $dimensions['height'] . '">
      <param name="movie" value="' . $src . '"></param>
      <param name="allowFullScreen" value="true"></param>
      <param name="allowscriptaccess" value="always"></param>
      <embed src="http://www.youtube.com/v/1SqBdS0XkV4?version=3&amp;hl=en_US&amp;rel=0" 
        type="application/x-shockwave-flash" width="' . $dimensions['width'] . '" 
        height="' . $dimensions['height'] . '" allowscriptaccess="always" allowfullscreen="true">
      </embed></object>';
  }
  else {
    $output = '<iframe width="' . $dimensions['width'] . '" 
      height="' . $dimensions['height'] . '" src="' . $src . '" 
      frameborder="0" allowfullscreen></iframe>';
  }

  return $output;
}


/**
 * Theme function for thumbnails.
 */
function theme_youtube_thumbnail($variables) {
  $id = $variables['video_id'];
  $style = $variables['image_style'];

  // Get YouTube settings.
  $size = variable_get('youtube_size', '420x315');
  $dimensions = youtube_get_dimensions($size);

  /* Get images by building correctly formed URL - kinda hackey.

  // Full size image.
  $path = 'http://img.youtube.com/vi/' . $id . '/0.jpg';
  // Default image thumbnail.
  $path = 'http://img.youtube.com/vi/' . $id . '/default.jpg';
  // High Quality version of the default thumbnail.
  $path = 'http://img.youtube.com/vi/' . $id . '/hqdefault.jpg';
  // High Resolution version of the default thumbnail.
  //$path = 'http://img.youtube.com/vi/' . $id . '/maxresdefault.jpg'; // May not work.
  // First thumbnail.
  $path = 'http://img.youtube.com/vi/' . $id . '/1.jpg';
  // Second thumbnail.
  $path = 'http://img.youtube.com/vi/' . $id . '/2.jpg';
  // Third thumbnail.
  $path = 'http://img.youtube.com/vi/' . $id . '/3.jpg';

  $src = url($path);
  */
  
  // Get the image via JSON API:
  $path = 'http://gdata.youtube.com/feeds/api/videos/' . $id;
  $query = array('v' => '2', 'alt' => 'jsonc');
  $url = url($path, array('query' => $query));
  $result = drupal_http_request($url);
  $data = json_decode($result->data);
  // Get the high quality default thumbnail.
  $src = $data->data->thumbnail->hqDefault;
  
  // TODO copy filefield_sources ability to save a remote file lcoally.
  // TODO use the UI setting for which preset to render the correct image style.

  $img = '<img src="' . $src . '" alt="" />';

  return $img;
}

/**
 * Helper function to split height and width.
 */
function youtube_get_dimensions($size = NULL) {
  $dimensions = array();
  if (strlen($size) != 7) {
    return $dimensions;
  }
  // Width is the first dimension
  $dimensions['width'] = substr($size, 0, 3);
  // Height is the second dimension.
  $dimensions['height'] = substr($size, 4, 3);

  return $dimensions;
}
